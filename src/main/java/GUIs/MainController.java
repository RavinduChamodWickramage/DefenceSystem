/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUIs;

import Interfaces.DefenceSystem;
import Interfaces.DefenceUnit;
import Strength.Strength;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author ravindu
 */
public class MainController extends javax.swing.JFrame implements DefenceSystem {

    /**
     * Creates new form MainController
     */
    public MainController() {
        setTitle("Main Controller");
        initComponents();
        initUnits();
        updateAreaLabels(areaClearCheckBox.isSelected());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        defenceUnits = new javax.swing.JComboBox<>();
        collectInformationBtn = new javax.swing.JButton();
        soldierLabel = new javax.swing.JLabel();
        fuelLabel = new javax.swing.JLabel();
        ammoLabel = new javax.swing.JLabel();
        soldierCountLabel = new javax.swing.JLabel();
        fuelCountLabel = new javax.swing.JLabel();
        ammoCountLabel = new javax.swing.JLabel();
        positionSlider = new javax.swing.JSlider();
        positionLabel = new javax.swing.JLabel();
        areaClearCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        sendMsg = new javax.swing.JTextArea();
        sendPrivateCheckBox = new javax.swing.JCheckBox();
        sendMsgBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        receivedMsg = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        defenceUnits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Helicopter", "Tank", "Submarine" }));
        defenceUnits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defenceUnitsActionPerformed(evt);
            }
        });

        collectInformationBtn.setText("Collect Informations");
        collectInformationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectInformationBtnActionPerformed(evt);
            }
        });

        soldierLabel.setText("Soldier Count");

        fuelLabel.setText("Fuel Count");

        ammoLabel.setText("Ammo Count");

        soldierCountLabel.setText("0");

        fuelCountLabel.setText("0");

        ammoCountLabel.setText("0");

        positionSlider.setMajorTickSpacing(20);
        positionSlider.setPaintLabels(true);
        positionSlider.setPaintTicks(true);
        positionSlider.setValue(0);
        positionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                positionSliderStateChanged(evt);
            }
        });

        positionLabel.setText("Position");

        areaClearCheckBox.setText("Area Clear");
        areaClearCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaClearCheckBoxActionPerformed(evt);
            }
        });

        sendMsg.setColumns(20);
        sendMsg.setRows(5);
        jScrollPane1.setViewportView(sendMsg);

        sendPrivateCheckBox.setText("Send Private");

        sendMsgBtn.setText("Send");
        sendMsgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsgBtnActionPerformed(evt);
            }
        });

        receivedMsg.setEditable(false);
        receivedMsg.setColumns(20);
        receivedMsg.setRows(5);
        receivedMsg.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(receivedMsg);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(soldierLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(defenceUnits, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fuelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ammoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(collectInformationBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                                .addComponent(areaClearCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(soldierCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fuelCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ammoCountLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sendPrivateCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sendMsgBtn))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(positionSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(positionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defenceUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(collectInformationBtn)
                    .addComponent(areaClearCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(soldierLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fuelLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ammoLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(soldierCountLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fuelCountLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ammoCountLabel)))
                        .addGap(18, 18, 18)
                        .addComponent(positionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendPrivateCheckBox)
                            .addComponent(sendMsgBtn))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMsgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsgBtnActionPerformed
        sendMessageToSelectedUnit();
    }//GEN-LAST:event_sendMsgBtnActionPerformed

    private void collectInformationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectInformationBtnActionPerformed
        collectInformationFromUnits();
    }//GEN-LAST:event_collectInformationBtnActionPerformed

    private void defenceUnitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defenceUnitsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_defenceUnitsActionPerformed

    private void positionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_positionSliderStateChanged
        updateUnitButtons();
    }//GEN-LAST:event_positionSliderStateChanged

    private void areaClearCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaClearCheckBoxActionPerformed
        boolean areaCleared = areaClearCheckBox.isSelected();
        updateAreaLabels(areaCleared);
    }//GEN-LAST:event_areaClearCheckBoxActionPerformed

    private void initUnits() {
        units = new ArrayList<>();
        units.add(new Helicopter(this));
        units.add(new Tank(this));
        units.add(new Submarine(this));

        for (DefenceUnit unit : units) {
            if (unit instanceof JFrame) {
                ((JFrame) unit).setVisible(true);
            }
        }
    }

    private void updateUnitButtons() {
        int sliderValue = positionSlider.getValue();
        Strength currentStrength = determineStrength(sliderValue);
        String selectedUnit = (String) defenceUnits.getSelectedItem();

        for (DefenceUnit unit : units) {
            if ("All".equals(selectedUnit) || unit.getClass().getSimpleName().equalsIgnoreCase(selectedUnit)) {
                unit.setStrength(currentStrength);
                unit.setPositionSliderValue(sliderValue);
            }
        }
    }

    private Strength determineStrength(int sliderValue) {
        if (sliderValue >= 0 && sliderValue < 20) {
            return Strength.CLOSED;
        } else if (sliderValue >= 20 && sliderValue < 40) {
            return Strength.LOW;
        } else if (sliderValue >= 40 && sliderValue < 60) {
            return Strength.MEDIUM;
        } else if (sliderValue >= 60 && sliderValue < 80) {
            return Strength.HIGH;
        } else if (sliderValue >= 80) {
            return Strength.STRONG;
        }
        return Strength.CLOSED;
    }

    private void sendMessageToSelectedUnit() {
        String message = sendMsg.getText();
        String selectedUnit = (String) defenceUnits.getSelectedItem();

        for (DefenceUnit unit : units) {
            if ("All".equals(selectedUnit) || unit.getClass().getSimpleName().equalsIgnoreCase(selectedUnit)) {
                unit.onMessageReceived("MainController: " + message);
            }
        }

        receivedMsg.append("To " + selectedUnit + ": " + message + "\n");
        sendMsg.setText("");
    }

    private void updateAreaLabels(boolean areaCleared) {
        String label = areaCleared ? "Area Cleared" : "Area Not Cleared";
        for (DefenceUnit unit : units) {
            unit.setAreaLabel(label);
        }
    }

    private void collectInformationFromUnits() {
        String selectedUnit = (String) defenceUnits.getSelectedItem();

        int totalSoldierCount = 0;
        int totalAmmoCount = 0;
        int totalFuelCount = 0;

        if ("All".equals(selectedUnit)) {
            for (DefenceUnit unit : units) {
                totalSoldierCount += unit.getSoldierCount();
                totalAmmoCount += unit.getAmmoCount();
                totalFuelCount += unit.getFuelCount();
            }

            soldierCountLabel.setText(String.valueOf(totalSoldierCount));
            ammoCountLabel.setText(String.valueOf(totalAmmoCount));
            fuelCountLabel.setText(String.valueOf(totalFuelCount));
        } else {
            for (DefenceUnit unit : units) {
                if (unit.getClass().getSimpleName().equalsIgnoreCase(selectedUnit)) {
                    soldierCountLabel.setText(String.valueOf(unit.getSoldierCount()));
                    ammoCountLabel.setText(String.valueOf(unit.getAmmoCount()));
                    fuelCountLabel.setText(String.valueOf(unit.getFuelCount()));
                }
            }
        }
    }

    @Override
    public void setAreaLabel(String label) {
        for (DefenceUnit unit : units) {
            unit.onMessageReceived("MainController: " + label);
        }
    }

    @Override
    public void setPositionSliderValue(int value) {
        for (DefenceUnit unit : units) {
            unit.onMessageReceived("MainController: " + value);
        }
    }

    @Override
    public void sendMessage(String message) {
        receivedMsg.append(message + "\n");
    }

    @Override
    public void onMessageReceived(String message) {
        receivedMsg.append(message + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(() -> {
            MainController mainController = new MainController();
            mainController.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ammoCountLabel;
    private javax.swing.JLabel ammoLabel;
    private javax.swing.JCheckBox areaClearCheckBox;
    private javax.swing.JButton collectInformationBtn;
    private javax.swing.JComboBox<String> defenceUnits;
    private javax.swing.JLabel fuelCountLabel;
    private javax.swing.JLabel fuelLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JSlider positionSlider;
    private javax.swing.JTextArea receivedMsg;
    private javax.swing.JTextArea sendMsg;
    private javax.swing.JButton sendMsgBtn;
    private javax.swing.JCheckBox sendPrivateCheckBox;
    private javax.swing.JLabel soldierCountLabel;
    private javax.swing.JLabel soldierLabel;
    // End of variables declaration//GEN-END:variables
    private List<DefenceUnit> units;
}
