/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUIs;

import Interfaces.DefenceSystem;
import Interfaces.DefenceUnit;
import Strength.Strength;
import javax.swing.SwingUtilities;

/**
 *
 * @author ravindu
 */
public class Tank extends javax.swing.JFrame implements DefenceUnit {

    /**
     * Creates new form Tank
     *
     * @param defenceUnit
     */
    public Tank(DefenceSystem defenceUnit) {
        this.defenceUnit = defenceUnit;
        setTitle("Tank");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        areaLabel = new javax.swing.JLabel();
        shootBtn = new javax.swing.JButton();
        missileBtn = new javax.swing.JButton();
        redarBtn = new javax.swing.JButton();
        rotateBtn = new javax.swing.JButton();
        soldierLabel = new javax.swing.JLabel();
        soldierCount = new javax.swing.JSpinner();
        ammoLabel = new javax.swing.JLabel();
        ammoCount = new javax.swing.JSpinner();
        positionCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainControllerMsg = new javax.swing.JTextArea();
        tankMsg = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();
        tankFuel = new javax.swing.JSlider();
        fuelLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaLabel.setText("Area Not Cleared");

        shootBtn.setText("Shoot");

        missileBtn.setText("Missile Operation");

        redarBtn.setText("Redar Operation");

        rotateBtn.setText("Rotate Shooting");

        soldierLabel.setText("Soldier Count");

        soldierCount.setModel(new javax.swing.SpinnerNumberModel(100, 0, null, 1));

        ammoLabel.setText("Ammo Count");

        ammoCount.setModel(new javax.swing.SpinnerNumberModel(100, 0, null, 1));

        positionCheckBox.setText("Position");
        positionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionCheckBoxActionPerformed(evt);
            }
        });

        mainControllerMsg.setEditable(false);
        mainControllerMsg.setColumns(20);
        mainControllerMsg.setRows(5);
        jScrollPane1.setViewportView(mainControllerMsg);

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        tankFuel.setMajorTickSpacing(25);
        tankFuel.setOrientation(javax.swing.JSlider.VERTICAL);
        tankFuel.setPaintLabels(true);
        tankFuel.setPaintTicks(true);
        tankFuel.setValue(100);
        tankFuel.setMaximumSize(new java.awt.Dimension(46, 100));

        fuelLabel.setText("Fuel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tankMsg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(shootBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(missileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(redarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rotateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(positionCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ammoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(soldierLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ammoCount, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(soldierCount, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(areaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tankFuel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fuelLabel))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fuelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tankFuel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(areaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(shootBtn)
                                    .addComponent(missileBtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(redarBtn)
                                    .addComponent(rotateBtn)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(soldierLabel)
                                    .addComponent(soldierCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ammoLabel)
                                    .addComponent(ammoCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(positionCheckBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tankMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendBtn))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void positionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionCheckBoxActionPerformed
        boolean positionChecked = positionCheckBox.isSelected();
        updateButtons(positionChecked, currentStrengthLevel);
    }//GEN-LAST:event_positionCheckBoxActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        String message = tankMsg.getText();
        sendTankMessage(message);
    }//GEN-LAST:event_sendBtnActionPerformed

    @Override
    public void setAreaLabel(String text) {
        areaLabel.setText(text);
    }

    public void setShootButtonEnabled(boolean enabled) {
        shootBtn.setEnabled(enabled);
    }

    public void setMissileButtonEnabled(boolean enabled) {
        missileBtn.setEnabled(enabled);
    }

    public void setRedarButtonEnabled(boolean enabled) {
        redarBtn.setEnabled(enabled);
    }

    public void setRotateButtonEnabled(boolean enabled) {
        rotateBtn.setEnabled(enabled);
    }

    @Override
    public void setPositionSliderValue(int sliderValue) {
        this.positionSliderValue = sliderValue;
        updateButtons(positionCheckBox.isSelected(), currentStrengthLevel);
    }

    @Override
    public void setStrength(Strength strength) {
        this.currentStrengthLevel = strength;
        updateButtons(positionCheckBox.isSelected(), currentStrengthLevel);
    }

    private void updateButtons(boolean positionChecked, Strength strength) {
        if (positionChecked) {
            switch (strength) {
                case CLOSED:
                    setShootButtonEnabled(false);
                    setMissileButtonEnabled(false);
                    setRedarButtonEnabled(false);
                    setRotateButtonEnabled(false);
                    break;
                case LOW:
                    setShootButtonEnabled(true);
                    setMissileButtonEnabled(false);
                    setRedarButtonEnabled(false);
                    setRotateButtonEnabled(false);
                    break;
                case MEDIUM:
                    setShootButtonEnabled(true);
                    setMissileButtonEnabled(true);
                    setRedarButtonEnabled(false);
                    setRotateButtonEnabled(false);
                    break;
                case HIGH:
                    setShootButtonEnabled(true);
                    setMissileButtonEnabled(true);
                    setRedarButtonEnabled(true);
                    setRotateButtonEnabled(false);
                    break;
                case STRONG:
                    setShootButtonEnabled(true);
                    setMissileButtonEnabled(true);
                    setRedarButtonEnabled(true);
                    setRotateButtonEnabled(true);
                    break;
            }
        } else {
            setShootButtonEnabled(false);
            setMissileButtonEnabled(false);
            setRedarButtonEnabled(false);
            setRotateButtonEnabled(false);
        }
    }

    @Override
    public void sendMessage(String message) {
        defenceUnit.sendMessage("Tank: " + message);
    }

    @Override
    public void onMessageReceived(String message) {
        mainControllerMsg.append(message + "\n");
    }

    private void sendTankMessage(String message) {
        sendMessage(message);
        tankMsg.setText("");
    }

    @Override
    public int getSoldierCount() {
        return (int) soldierCount.getValue();
    }

    @Override
    public int getAmmoCount() {
        return (int) ammoCount.getValue();
    }

    @Override
    public int getFuelCount() {
        return tankFuel.getValue();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(() -> {
            Tank tank = new Tank(null);
            tank.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner ammoCount;
    private javax.swing.JLabel ammoLabel;
    private javax.swing.JLabel areaLabel;
    private javax.swing.JLabel fuelLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mainControllerMsg;
    private javax.swing.JButton missileBtn;
    private javax.swing.JCheckBox positionCheckBox;
    private javax.swing.JButton redarBtn;
    private javax.swing.JButton rotateBtn;
    public javax.swing.JButton sendBtn;
    private javax.swing.JButton shootBtn;
    private javax.swing.JSpinner soldierCount;
    private javax.swing.JLabel soldierLabel;
    private javax.swing.JSlider tankFuel;
    private javax.swing.JTextField tankMsg;
    // End of variables declaration//GEN-END:variables
    private DefenceSystem defenceUnit;
    private Strength currentStrengthLevel = Strength.CLOSED;
    private int positionSliderValue;
}
